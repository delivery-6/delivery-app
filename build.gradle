plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // QueryDSL: 동적 SQL 생성을 위한 라이브러리 및 코드 생성 설정
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'

    // Spring Boot 웹 애플리케이션 개발
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Lombok: 코드 자동 생성을 위한 라이브러리
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Boot 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // MySQL 데이터베이스 연결
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'

    // JUnit 테스트 실행기
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Hibernate Validator: Java Bean Validation 구현체
    implementation 'org.hibernate.validator:hibernate-validator'

    // Spring Boot JPA (Hibernate 포함)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Jakarta Persistence API
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT: JSON Web Token 인증 및 검증
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring Boot 개발 중 핫 리로딩 지원
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // .env 파일 지원
    implementation 'me.paulschwarz:spring-dotenv:3.0.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL Q 클래스 생성 위치 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main {
        java {
            srcDirs += querydslDir
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}
