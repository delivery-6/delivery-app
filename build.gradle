plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Hibernate Validator
    implementation 'org.hibernate.validator:hibernate-validator'

    // MySQL
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'

    // QueryDSL
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring Dotenv
    implementation 'me.paulschwarz:spring-dotenv:3.0.0'

    // 개발 도구
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // 테스트 라이브러리
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL 메타 클래스 생성 경로 설정
def generatedQueryDSLDir = file("$buildDir/generated/querydsl")

sourceSets {
    main {
        java {
            // QueryDSL 메타 클래스가 생성되는 경로 추가
            srcDirs += generatedQueryDSLDir
        }
    }
}

tasks.withType(JavaCompile) {
    // QueryDSL 어노테이션 프로세서의 출력 디렉토리 지정
    options.annotationProcessorGeneratedSourcesDirectory = generatedQueryDSLDir
}

// Gradle clean 시 QueryDSL 생성 디렉토리 제거
clean {
    delete generatedQueryDSLDir
}
